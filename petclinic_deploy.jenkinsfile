pipeline {
    agent any
    stages {
        
        stage('Checkout for main') {
            when {
                branch 'main'  
            }
            steps {
                cleanWs()
                git branch: 'main',
                url: 'https://github.com/ponomarenkomo/spring-petclinic'
            }
        }        
        stage('Checkout for dev') {
            when {
                branch 'dev'  
            }
            steps {
                cleanWs()
                git branch: 'dev',
                url: 'https://github.com/ponomarenkomo/spring-petclinic'
            }
        }        
        
        stage('Dependency track') {
            steps {
                sh 'mvn org.owasp:dependency-check-maven:6.5.3:check'
                archiveArtifacts artifacts: "target/*.html"
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn package'
            }
            post {
                failure('Build Fail') {
                    echo "Build Failed!"
                }
                success {
                     // Artifact saving
                    //archiveArtifacts artifacts: "target/*.jar", onlyIfSuccessful: true
                    echo "Builded Successfully"
                }
            }
        }
        stage('Push to DTR') {
            when {
                branch 'dev'  
            }
            
            steps {
                withCredentials([string(credentialsId: 'DTR_PASS', variable: 'DTR_PASS')]) {
                    sh """
                        #!/bin/bash
                        sudo docker build . -t $LOCAL_ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER
                        docker login -u testuser -p ${DTR_PASS} $LOCAL_ECR_REGISTRY
                        sudo docker push $LOCAL_ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER
                    """ 
            }
        }
        
        stage('Push to ECR'){
            when {
                branch 'main'  
            }
        
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    sh """aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY"""
                            sh """
                            #!/bin/bash
                             docker build . -t $ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER
                             docker push $ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER"""
                    }
            }
        }
        stage('Deploy to dev'){
            when {
                branch 'dev'  
            }
            steps{
                sh """
                   #!/bin/bash
                   sudo docker pull $LOCAL_ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER
                   sudo docker run --restart  unless-stopped -d -p 5505:8081 --name spring-petclinic $ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER
                """
            }
        }
        
        stage('Deploy to prod'){
            when {
                branch 'main'  
            }
            steps {
                    sh """
                    sed -ie "s;\\\${app_image};$ECR_REGISTRY/petclinic-ecr-demo:$BUILD_NUMBER;g" taskdef.json
                    aws ecs register-task-definition --family testapp-task --cli-input-json file://taskdef.json
                    """
                    
                    sh '''
                    #!/bin/bash
                    SERVICE_NAME="petclinic-service-demo"
                    TASK_FAMILY="testapp-task"
                    TASK_REVISION=`aws ecs describe-task-definition --task-definition testapp-task | grep "revision" | tr "," " " | awk '{print \$2}' `
                    DESIRED_COUNT=`aws ecs describe-services --services ${SERVICE_NAME} --cluster petclinic-cluster-demo | grep "desiredCount" | tr "/" " " | awk '{print \$2}' | sed 's/,$//' | head -1`
        
                    aws ecs update-service --cluster petclinic-cluster-demo --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${TASK_REVISION} --desired-count ${DESIRED_COUNT} --force-new-deployment
                    '''
                    sh "sleep 40"
            }
        }
        stage('DAST'){
            when {
                branch 'dev'  
            }
            steps {
                sh "docker run --rm -u 0 -v \$(pwd)/target:/zap/wrk -t owasp/zap2docker-stable zap-baseline.py -t http://$ECS_ALB:8080 -g gen.conf -r zaphtmlreport.html || true" 
                archiveArtifacts artifacts: "target/*report.html"
            }
        }
    }
}
